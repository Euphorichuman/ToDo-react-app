{"version":3,"sources":["components/TodoItem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoItem","this","props","todo","index","completeTodo","removeTodo","className","type","value","id","checked","completed","onClick","htmlFor","style","textDecoration","name","React","Component","KEY","App","useEffect","todos","JSON","parse","localStorage","getItem","setTodos","useState","newTodo","setNewTodo","taskInput","useRef","setItem","stringify","addTodo","newTodos","splice","onSubmit","e","preventDefault","trim","current","placeholder","focus","onChange","target","ref","autoFocus","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAUaA,EAAb,4JACE,WAAU,IAAD,OACP,EAAkDC,KAAKC,MAA/CC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,aAAcC,EAAnC,EAAmCA,WACnC,OACE,sBAAKC,UAAU,+CAAf,UACE,sBAAKA,UAAU,aAAf,UACE,uBACEA,UAAU,mBACVC,KAAK,WACLC,MAAM,GACNC,GAAG,mBACHC,QAAUR,EAAKS,UACfC,QAAS,kBAAMR,EAAaD,MAE9B,uBACEG,UAAU,mBACVO,QAAQ,mBACRC,MAAO,CACLC,eAAgBb,EAAKS,UAAY,eAAiB,IAJtD,SAOGT,EAAKc,UAGV,wBACET,KAAK,SACLD,UAAU,YACVM,QAAS,kBAAMP,EAAW,EAAKJ,MAAME,YAvB0BA,OAJzE,GAA8Bc,IAAMC,WCL9BC,EAAM,iBAyFGC,MAvFf,WAGEC,qBAAU,WACR,IAAMC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQP,IAAQ,MAC/DQ,EAASL,KACR,IAEH,MAA8BM,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAkB,IAA5C,mBAAON,EAAP,KAAcK,EAAd,KAEMI,EAAYC,iBAAyB,MAG3CX,qBAAU,WACRI,aAAaQ,QAAQd,EAAKI,KAAKW,UAAUZ,MACxC,CAACA,IAEJ,IAUMa,EAAU,SAACnB,GACf,IAAMoB,EAAiB,sBAAOd,GAAP,CAAc,CAAEN,OAAML,WAAW,KACxDgB,EAASS,IAGLhC,EAAe,SAACD,GACpB,IAAMiC,EAAiB,YAAOd,GAC9Bc,EAASjC,GAAOQ,WAAayB,EAASjC,GAAOQ,UAC7CgB,EAASS,IAGL/B,EAAa,SAACF,GAClB,IAAMiC,EAAiB,YAAOd,GAC9Bc,EAASC,OAAOlC,EAAO,GACvBwB,EAASS,IAGX,OACE,qBAAK9B,UAAU,gBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,uBAAf,UAEE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBAAMgC,SAlCG,SAACC,GAAoB,IAAD,EAEvC,GADAA,EAAEC,iBACqB,KAAnBX,EAAQY,OACV,OAAQV,EAAUW,QAASC,YAAc,sBAE3CR,EAAQN,GACRC,EAAW,IACX,UAAAC,EAAUW,eAAV,SAAmBE,SA2BT,UACE,uBACErC,KAAK,OACLsC,SAAU,SAACN,GAAD,OAAOT,EAAWS,EAAEO,OAAOtC,QACrCA,MAAOqB,EACPvB,UAAU,eACVyC,IAAKhB,EACLiB,WAAS,EACTL,YAAY,gBAEd,qBAAKrC,UAAU,cAAf,SACE,wBAAQA,UAAU,gBAAgBC,KAAK,SAAvC,+BASPe,EAAM2B,KAAI,SAAC/C,EAAagD,GAAd,OACT,cAAC,EAAD,CAEEhD,KAAMA,EACNC,MAAO+C,EACP9C,aAAcA,EACdC,WAAYA,GAJP6C,cCnEJC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.01f9ffc9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ITodo } from \"../Interfaces\";\r\n\r\ninterface ITodoItemProps {\r\n  todo: ITodo;\r\n  index: number;\r\n  completeTodo(index: number): void;\r\n  removeTodo(index: number): void;\r\n}\r\n\r\nexport class TodoItem extends React.Component<ITodoItemProps> {\r\n  render() {\r\n    const { todo, index, completeTodo, removeTodo } = this.props;\r\n    return (\r\n      <div className=\"alert alert-dismissible alert-secondary mt-2\" key={index}>\r\n        <div className=\"form-check\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            value=\"\"\r\n            id=\"flexCheckChecked\"\r\n            checked= {todo.completed}\r\n            onClick={() => completeTodo(index)}\r\n          />\r\n          <label\r\n            className=\"form-check-label\"\r\n            htmlFor=\"flexCheckDefault\"\r\n            style={{\r\n              textDecoration: todo.completed ? \"line-through\" : \"\"\r\n            }}\r\n          >\r\n            {todo.name}\r\n          </label>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          onClick={() => removeTodo(this.props.index)}\r\n        ></button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { TodoItem } from \"./components/TodoItem\";\nimport { ITodo } from \"./Interfaces\";\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\nconst KEY = \"todosApp.todos\";\n\nfunction App(): JSX.Element {\n\n  // Load todos from local storage\n  useEffect(() => {\n    const todos: ITodo[] = JSON.parse(localStorage.getItem(KEY) || '[]');\n    setTodos(todos);\n  }, []);\n\n  const [newTodo, setNewTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  const taskInput = useRef<HTMLInputElement>(null);\n\n  // Save todos to local storage\n  useEffect(() => {\n    localStorage.setItem(KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  const handleSubmit = (e: FormElement) => {\n    e.preventDefault(); // prevents the page from refreshing\n    if (newTodo.trim() === \"\") {\n      return (taskInput.current!.placeholder = \"Please enter a task\");\n    }\n    addTodo(newTodo);\n    setNewTodo(\"\");\n    taskInput.current?.focus();\n  };\n\n  const addTodo = (name: string): void => {\n    const newTodos: ITodo[] = [...todos, { name, completed: false }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = (index: number): void => {\n    const newTodos: ITodo[] = [...todos];\n    newTodos[index].completed = !newTodos[index].completed;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (index: number): void => {\n    const newTodos: ITodo[] = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          {/* Form */}\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <input\n                  type=\"text\"\n                  onChange={(e) => setNewTodo(e.target.value)}\n                  value={newTodo}\n                  className=\"form-control\"\n                  ref={taskInput}\n                  autoFocus\n                  placeholder=\"Add Todo...\"\n                />\n                <div className=\"d-grid mt-2\">\n                  <button className=\"btn btn-light\" type=\"submit\">\n                    Add task\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n          {/* Todo Items*/}\n          {todos.map((todo: ITodo, key: number) => (\n            <TodoItem\n              key={key}\n              todo={todo}\n              index={key}\n              completeTodo={completeTodo}\n              removeTodo={removeTodo}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootswatch/dist/quartz/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}